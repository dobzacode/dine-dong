"""modify meal_schema

Revision ID: 344a9429646a
Revises: c79b0938ea4b
Create Date: 2024-08-21 16:29:07.723847

"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "344a9429646a"
down_revision = "c79b0938ea4b"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "address",
        sa.Column("address_id", sa.Uuid(as_uuid=False), nullable=False),
        sa.Column("address1", sa.String(length=256), nullable=False),
        sa.Column("address2", sa.String(length=256), nullable=True),
        sa.Column("formatted_address", sa.String(length=256), nullable=False),
        sa.Column("city", sa.String(length=256), nullable=False),
        sa.Column("department", sa.String(length=256), nullable=True),
        sa.Column("postal_code", sa.String(length=256), nullable=True),
        sa.Column("country", sa.String(length=256), nullable=False),
        sa.Column("lat", sa.Float(), nullable=False),
        sa.Column("lng", sa.Float(), nullable=False),
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("address_id"),
    )
    op.create_table(
        "ingredient",
        sa.Column("ingredient_id", sa.Uuid(as_uuid=False), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("ingredient_id"),
    )
    op.create_table(
        "meal",
        sa.Column("meal_id", sa.Uuid(as_uuid=False), nullable=False),
        sa.Column("name", sa.String(length=60), nullable=False),
        sa.Column("cooking_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("expiration_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("photo_key", sa.String(length=256), nullable=False),
        sa.Column("weight", sa.Integer(), nullable=False),
        sa.Column("diet", postgresql.ARRAY(sa.String(length=256)), nullable=False),
        sa.Column("additional_information", sa.String(length=500), nullable=True),
        sa.Column(
            "payment_method",
            sa.Enum("online", "inPerson", native_enum=False),
            nullable=False,
        ),
        sa.Column("user_id", sa.Uuid(as_uuid=False), nullable=False),
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user_account.user_id"],
        ),
        sa.PrimaryKeyConstraint("meal_id"),
    )
    op.create_table(
        "ingredient_meal",
        sa.Column("ingredient_id", sa.Uuid(as_uuid=False), nullable=False),
        sa.Column("meal_id", sa.Uuid(as_uuid=False), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=True),
        sa.Column(
            "unit",
            sa.Enum(
                "MILLIGRAMME",
                "GRAMME",
                "KILOGRAMME",
                "MILLILITRE",
                "CENTILITRE",
                "LITRE",
                "CUILLEUR",
                "CUILLEUR_SOUPE",
                "UNITE",
                name="unitenum",
            ),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["ingredient_id"],
            ["ingredient.ingredient_id"],
        ),
        sa.ForeignKeyConstraint(
            ["meal_id"],
            ["meal.meal_id"],
        ),
        sa.PrimaryKeyConstraint("ingredient_id", "meal_id"),
    )
    op.drop_index("ix_refresh_token_refresh_token", table_name="refresh_token")
    op.drop_table("refresh_token")
    op.add_column(
        "user_account", sa.Column("open_id", sa.String(length=256), nullable=False)
    )
    op.drop_index("ix_user_account_email", table_name="user_account")
    op.drop_column("user_account", "hashed_password")
    op.drop_column("user_account", "email")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "user_account",
        sa.Column("email", sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    )
    op.add_column(
        "user_account",
        sa.Column(
            "hashed_password",
            sa.VARCHAR(length=128),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.create_index("ix_user_account_email", "user_account", ["email"], unique=True)
    op.drop_column("user_account", "open_id")
    op.create_table(
        "refresh_token",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column(
            "refresh_token", sa.VARCHAR(length=512), autoincrement=False, nullable=False
        ),
        sa.Column("used", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("exp", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "create_time",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "update_time",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user_account.user_id"],
            name="refresh_token_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="refresh_token_pkey"),
    )
    op.create_index(
        "ix_refresh_token_refresh_token",
        "refresh_token",
        ["refresh_token"],
        unique=True,
    )
    op.drop_table("ingredient_meal")
    op.drop_table("meal")
    op.drop_table("ingredient")
    op.drop_table("address")
    # ### end Alembic commands ###
