"""use_user_sub_as_primary_key

Revision ID: 20934bee1d5d
Revises:
Create Date: 2024-09-17 17:20:46.771768

"""

import sqlalchemy as sa
from geoalchemy2.types import Geometry
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "20934bee1d5d"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ingredient",
        sa.Column("ingredient_id", sa.Uuid(as_uuid=False), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("ingredient_id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "user_account",
        sa.Column("user_sub", sa.String(length=256), nullable=False),
        sa.Column("email", sa.String(length=256), nullable=False),
        sa.Column("username", sa.String(length=35), nullable=False),
        sa.Column("first_name", sa.String(length=35), nullable=True),
        sa.Column("last_name", sa.String(length=35), nullable=True),
        sa.Column("about_me", sa.String(length=256), nullable=True),
        sa.Column("phone_number", sa.String(length=256), nullable=True),
        sa.Column("picture_key", sa.String(length=256), nullable=True),
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("user_sub"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("user_sub"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "address",
        sa.Column("address_id", sa.Uuid(as_uuid=False), nullable=False),
        sa.Column("address1", sa.String(length=256), nullable=False),
        sa.Column("address2", sa.String(length=256), nullable=True),
        sa.Column("formatted_address", sa.String(length=256), nullable=False),
        sa.Column("city", sa.String(length=256), nullable=False),
        sa.Column("department", sa.String(length=256), nullable=True),
        sa.Column("postal_code", sa.String(length=256), nullable=True),
        sa.Column("country", sa.String(length=256), nullable=False),
        sa.Column("lat", sa.Float(), nullable=False),
        sa.Column("lng", sa.Float(), nullable=False),
        sa.Column(
            "geo_location",
            Geometry(
                geometry_type="POINT",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column("user_sub", sa.String(length=256), nullable=False),
        sa.Column("resident_sub", sa.String(length=256), nullable=True),
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["resident_sub"],
            ["user_account.user_sub"],
        ),
        sa.ForeignKeyConstraint(
            ["user_sub"],
            ["user_account.user_sub"],
        ),
        sa.PrimaryKeyConstraint("address_id"),
    )

    op.create_table(
        "meal",
        sa.Column("meal_id", sa.Uuid(as_uuid=False), nullable=False),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=60), nullable=False),
        sa.Column("cooking_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("expiration_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("picture_key", sa.String(length=256), nullable=False),
        sa.Column("weight", sa.Integer(), nullable=False),
        sa.Column("additional_information", sa.String(length=500), nullable=True),
        sa.Column("address_id", sa.Uuid(as_uuid=False), nullable=False),
        sa.Column(
            "diet",
            postgresql.ARRAY(
                postgresql.ENUM(
                    "VEGETARIAN",
                    "VEGAN",
                    "GLUTENFREE",
                    "LACTOSEFREE",
                    name="dietsenum",
                    create_constraint=True,
                    create_type=False,
                )
            ),
            server_default="{}",
            nullable=True,
        ),
        sa.Column(
            "payment_method",
            postgresql.ENUM(
                "ONLINE", "IN_PERSON", name="paymentmethodsenum", create_type=False
            ),
            nullable=False,
        ),
        sa.Column("user_sub", sa.String(length=256), nullable=False),
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["address_id"],
            ["address.address_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_sub"],
            ["user_account.user_sub"],
        ),
        sa.PrimaryKeyConstraint("meal_id"),
    )
    op.create_table(
        "ingredient_meal",
        sa.Column("ingredient_id", sa.Uuid(as_uuid=False), nullable=False),
        sa.Column("meal_id", sa.Uuid(as_uuid=False), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=True),
        sa.Column(
            "unit",
            postgresql.ENUM(
                "MILLIGRAMME",
                "GRAMME",
                "MILLILITRE",
                "CENTILITRE",
                "LITRE",
                "CUILLIERE_CAFE",
                "CUILLIERE_SOUPE",
                "UNITE",
                name="unitenum",
                create_type=False,
            ),
            nullable=True,
        ),
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["ingredient_id"],
            ["ingredient.ingredient_id"],
        ),
        sa.ForeignKeyConstraint(["meal_id"], ["meal.meal_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("ingredient_id", "meal_id"),
    )
    op.create_table(
        "order",
        sa.Column("order_id", sa.Uuid(as_uuid=False), nullable=False),
        sa.Column("user_sub", sa.String(length=256), nullable=False),
        sa.Column("meal_id", sa.Uuid(as_uuid=False), nullable=False),
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["meal_id"],
            ["meal.meal_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_sub"],
            ["user_account.user_sub"],
        ),
        sa.PrimaryKeyConstraint("order_id"),
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_table("order")
    op.drop_table("ingredient_meal")
    op.drop_table("meal")
    op.drop_index(
        "idx_address_geo_location", table_name="address", postgresql_using="gist"
    )
    op.drop_table("address")
    op.drop_table("user_account")
    op.drop_table("ingredient")
    # ### end Alembic commands ###
